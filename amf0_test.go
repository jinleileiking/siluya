package main

import (
	"testing"

	"github.com/davecgh/go-spew/spew"
)

func TestAmf0(t *testing.T) {

	/*
	 00000000  02 00 07 63 6f 6e 6e 65  63 74 00 3f f0 00 00 00  |...connect.?....|
	 00000010  00 00 00 03 00 03 61 70  70 02 00 05 73 6d 61 6c  |......app...smal|
	 00000020  6c 00 04 74 79 70 65 02  00 0a 6e 6f 6e 70 72 69  |l..type...nonpri|
	 00000030  76 61 74 65 00 08 66 6c  61 73 68 56 65 72 02 00  |vate..flashVer..|
	 00000040  24 46 4d 4c 45 2f 33 2e  30 20 28 63 6f 6d 70 61  |$FMLE/3.0 (compa|
	 00000050  74 69 62 6c 65 3b 20 4c  61 76 66 35 37 2e 38 33  |tible; Lavf57.83|
	 00000060  2e 31 30 30 29 00 05 74  63 55 72 6c 02 00 1d 72  |.100)..tcUrl...r|
	 00000070  74 6d 70 3a 2f 2f 31 30  2e 36 34 2e 37 2e 31 30  |tmp://10.64.7.10|
	 00000080  c3 36 3a 38 37 36 35 2f  73 6d 61 6c 6c 00 00     |.6:8765/small..|
	*/

	connect := []byte{
		0x02, 0x00, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, // connect
		0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // transcaction id
		0x03,                         //1
		0x00, 0x03, 0x61, 0x70, 0x70, // app 5
		0x02, 0x00, 0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, // small 8
		0x00, 0x04, 0x74, 0x79, 0x70, 0x65, //type // 6
		0x02, 0x00, 0x0a, 0x6e, 0x6f, 0x6e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, //nonprivate
		0x00, 0x08, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x56, 0x65, 0x72, // flashVer
		0x02, 0x00, 0x24, 0x46, 0x4d, 0x4c, 0x45, 0x2f, 0x33, 0x2e, 0x30, 0x20, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61,
		0x74, 0x69, 0x62, 0x6c, 0x65, 0x3b, 0x20, 0x4c, 0x61, 0x76, 0x66, 0x35, 0x37, 0x2e, 0x38, 0x33,
		0x2e, 0x31, 0x30, 0x30, 0x29,
		0x00, 0x05, 0x74, 0x63, 0x55, 0x72, 0x6c, //tcUrl
		0x02, 0x00, 0x03, 0x61, 0x61, 0x61,
		0x00, 0x00, 0x09, //end
	}

	spew.Dump(parseAMF0(connect))

}

func TestAmf0_1(t *testing.T) {

	/*
	 00000000  02 00 07 63 6f 6e 6e 65  63 74 00 3f f0 00 00 00  |...connect.?....|
	 00000010  00 00 00 03 00 03 61 70  70 02 00 05 73 6d 61 6c  |......app...smal|
	 00000020  6c 00 04 74 79 70 65 02  00 0a 6e 6f 6e 70 72 69  |l..type...nonpri|
	 00000030  76 61 74 65 00 08 66 6c  61 73 68 56 65 72 02 00  |vate..flashVer..|
	 00000040  24 46 4d 4c 45 2f 33 2e  30 20 28 63 6f 6d 70 61  |$FMLE/3.0 (compa|
	 00000050  74 69 62 6c 65 3b 20 4c  61 76 66 35 37 2e 38 33  |tible; Lavf57.83|
	 00000060  2e 31 30 30 29 00 05 74  63 55 72 6c

	 02 00 1d 72
	 74 6d 70 3a 2f 2f 31 30  2e 36 34 2e 37 2e 31 30
	 c3 36 3a 38 37 36 35 2f  73 6d 61 6c 6c 00 00 09
	*/

	connect := []byte{
		// 0x02, 0x00, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, // connect
		// 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // transcaction id
		0x03, //1
		// 0x00, 0x03, 0x61, 0x70, 0x70, // app 5
		// 0x02, 0x00, 0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, // small 8
		// 0x00, 0x04, 0x74, 0x79, 0x70, 0x65, //type // 6
		// 0x02, 0x00, 0x0a, 0x6e, 0x6f, 0x6e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, //nonprivate
		// 0x00, 0x08, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x56, 0x65, 0x72, // flashVer
		// 0x02, 0x00, 0x24, 0x46, 0x4d, 0x4c, 0x45, 0x2f, 0x33, 0x2e, 0x30, 0x20, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61,
		// 0x74, 0x69, 0x62, 0x6c, 0x65, 0x3b, 0x20, 0x4c, 0x61, 0x76, 0x66, 0x35, 0x37, 0x2e, 0x38, 0x33,
		// 0x2e, 0x31, 0x30, 0x30, 0x29,
		0x00, 0x05, 0x74, 0x63, 0x55, 0x72, 0x6c, //tcUrl
		0x02, 0x00, 0x1d,
		0x72, 0x74, 0x6d, 0x70, 0x3a, 0x2f, 0x2f, 0x31,
		0x30, 0x2e, 0x36, 0x34, 0x2e, 0x37, 0x2e, 0x31,
		0x30, 0x36, 0x3a, 0x38, 0x37, 0x36, 0x35,
		0x2f, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
		0x00, 0x00, 0x09, //end
	}

	spew.Dump(parseAMF0(connect))

}

func TestConnRsp(t *testing.T) {
	connectRsp := []byte{
		0x02, 0x00, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, //_result
		0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // trans id
		0x03,
		0x00, 0x06, 0x66, 0x6d, 0x73, 0x56, 0x65, 0x72, // fmsver
		0x02, 0x00, 0x0d,
		0x46, 0x4d, 0x53, 0x2f, 0x33, 0x2c, 0x30, 0x2c,
		0x31, 0x2c, 0x31, 0x32, 0x33,
		0x00, 0x0c,
		0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
		0x74, 0x69, 0x65, 0x73,
		0x00, 0x40,
		0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x09, 0x03, 0x00, 0x05, 0x6c, 0x65, 0x76,
		0x65, 0x6c, 0x02, 0x00, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x00, 0x04, 0x63, 0x6f,
		0x64, 0x65, 0x02, 0x00, 0x1d, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
		0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65,
		0x73, 0x73, 0x00, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02,
		0x00, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x75, 0x63,
		0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x2e, 0x00, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45,
		0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x09,
	}
	spew.Dump(parseAMF0(connectRsp))
}
