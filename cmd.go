package main

import (
	"encoding/binary"
	"math"

	"github.com/davecgh/go-spew/spew"
)

func handleCmdMsg(conn *rtmpConn, cmdMsg []amf0) {

	msg, _ := getAmf0String(cmdMsg[0])
	if "connect" == msg {

		app := cmdMsg[2].obj[0].value.str
		conn.app = app
		/*
		                                  02 00 00 00 00 00 05 06   ..G.D.¾Y........
		   0040   00 00 00 00 00 4c 4b 40 02|02 00 00 00 00 00 04   .....LK@........
		   0050   01 00 00 00 00 00 00 0f a0|03 00 00 00 00 00 be   ........ ......¾
		   0060   14 00 00 00 00 02 00 07 5f 72 65 73 75 6c 74 00   ........_result.
		   0070   3f f0 00 00 00 00 00 00 03 00 06 66 6d 73 56 65   ?ð.........fmsVe
		   0080   72 02 00 0d 46 4d 53 2f 33 2c 30 2c 31 2c 31 32   r...FMS/3,0,1,12
		   0090   33 00 0c 63 61 70 61 62 69 6c 69 74 69 65 73 00   3..capabilities.
		   00a0   40 3f 00 00 00 00 00 00 00 00 09 03 00 05 6c 65   @?............le
		   00b0   76 65 6c 02 00 06 73 74 61 74 75 73 00 04 63 6f   vel...status..co
		   00c0   64 65 02 00 1d 4e 65 74 43 6f 6e 6e 65 63 74 69   de...NetConnecti
		   00d0   6f 6e 2e 43 6f 6e 6e 65 63 74 2e 53 75 63 63 65   on.Connect.Succe
		   00e0   73 73 00 0b 64 65 73 63 72 69 70 74 69 6f 6e 02   ss..description.
		   00f0   00 15 43 6f 6e 6e 65 63 74 69 6f 6e 20 73 75 63   ..Connection suc
		   0100   63 65 65 64 65 64 2e 00 0e 6f 62 6a 65 63 74 45   ceeded...objectE
		   0110   6e 63 6f 64 69 6e 67 00 00 00 00 00 00 00 00 00   ncoding.........
		   0120   00 00 09                                          ...
		*/
		connectRsp := []byte{

			// 0x02,
			// 0x00, 0x00, 0x00,
			// 0x00, 0x00, 0x04,
			// 0x05,
			// 0x00, 0x00, 0x00, 0x00,
			// 0x00, 0x4c, 0x4b, 0x40, //  50 0000 ack size

			// 0x02,
			// 0x00, 0x00, 0x00,
			// 0x00, 0x00, 0x05,
			// 0x06,
			// 0x00, 0x00, 0x00, 0x00,
			// 0x00, 0x4c, 0x4b, 0x40, // ack size  50 0000
			// 0x02, //limit 2

			0x02,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x04,
			0x01,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x0f, 0xa0, // set chunk size 4000

			0x03,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0xbe,
			0x14, //20
			0x00, 0x00, 0x00, 0x00,
			0x02, 0x00, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, //_result
			0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // trans id
			0x03,
			0x00, 0x06, 0x66, 0x6d, 0x73, 0x56, 0x65, 0x72, // fmsver
			0x02, 0x00, 0x0d,
			0x46, 0x4d, 0x53, 0x2f, 0x33, 0x2c, 0x30, 0x2c,
			0x31, 0x2c, 0x31, 0x32, 0x33,
			0x00, 0x0c,
			0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
			0x74, 0x69, 0x65, 0x73,
			0x00, 0x40,
			0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x09, 0x03, 0x00, 0x05, 0x6c, 0x65, 0x76,
			0x65, 0x6c, 0x02, 0x00, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x00, 0x04, 0x63, 0x6f,
			0x64, 0x65, 0x02, 0x00, 0x1d, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
			0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65,
			0x73, 0x73, 0x00, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02,
			0x00, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x75, 0x63,
			0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x2e, 0x00, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45,
			0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x09,
		}
		logger.Infow("connect", "detail", "send connect rsp done")
		conn.cksize = 4000
		writeConn(conn.conn, connectRsp)
	}
	if "createStream" == msg {
		spew.Dump(cmdMsg)
		// connectRsp := []byte{

		// 	/*
		// 		0000                                                     ....E..]åá@.=.0.
		// 		0010                                                     .@.j.è..&ÓõyíYé|
		// 		0020                                                     3¼-?...ÛA ......
		// 		0030                           03 00 00 00 00 00 1d 14   §.ý.T~CY........
		// 		0040   00 00 00 00 02 00 07 5f 72 65 73 75 6c 74 00 40   ......._result.@
		// 		0050   10 00 00 00 00 00 00 05 00 3f f0 00 00 00 00 00   .........?ð.....
		// 		0060   00                                                .
		// 	*/

		// 	0x03,
		// 	0x00, 0x00, 0x00,
		// 	0x00, 0x00, 0x1d,
		// 	0x14,
		// 	0x00, 0x00, 0x00, 0x00,
		// 	0x02, 0x00, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, //_result
		// 	0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //trans id
		// 	0x05,                                                 //null
		// 	0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //stream id
		// }
		connectRspHead := []byte{
			0x03,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x1d,
			0x14,
			0x00, 0x00, 0x00, 0x00,
			0x02, 0x00, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, //_result
		}
		connectRspTail := []byte{
			0x05,                                                 //null
			0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //stream id
		}

		var transid [8]byte
		binary.BigEndian.PutUint64(transid[:], math.Float64bits(float64(cmdMsg[1].number)))

		connectRsp := append(connectRspHead, 0x00)
		connectRsp = append(connectRsp, transid[:]...)
		connectRsp = append(connectRsp, connectRspTail...)

		spew.Dump(connectRsp)
		logger.Infow("createStream", "detail", "send createStream rsp done")
		writeConn(conn.conn, connectRsp)
	}
	if "publish" == msg {

		name := cmdMsg[3].str

		conn.name = name

		connectRsp := []byte{

			/*
				0000                                                     ....E..©åä@.=./Â
				0010                                                     .@.j.è..&ÓõyíYé¥
				0020                                                     3¼-p...Ûüè......
				0030                           05 00 00 00 00 00 69 14   §.ýNT~C.......i.
				0040   01 00 00 00 02 00 08 6f 6e 53 74 61 74 75 73 00   .......onStatus.
				0050   00 00 00 00 00 00 00 00 05 03 00 05 6c 65 76 65   ............leve
				0060   6c 02 00 06 73 74 61 74 75 73 00 04 63 6f 64 65   l...status..code
				0070   02 00 17 4e 65 74 53 74 72 65 61 6d 2e 50 75 62   ...NetStream.Pub
				0080   6c 69 73 68 2e 53 74 61 72 74 00 0b 64 65 73 63   lish.Start..desc
				0090   72 69 70 74 69 6f 6e 02 00 10 53 74 61 72 74 20   ription...Start
				00a0   70 75 62 6c 69 73 68 69 6e 67 00 00 09            publishing...

			*/

			0x05,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x69,
			0x14,
			0x01, 0x00, 0x00, 0x00,
			0x02, 0x00, 0x08, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, //onStatus
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
			0x05, //
			0x03,
			0x00, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
			0x02, 0x00, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
			0x00, 0x04, 0x63, 0x6f, 0x64, 0x65,
			0x02, 0x00, 0x17, 0x4e, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x62,
			0x6c, 0x69, 0x73, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x00, 0x0b, 0x64, 0x65, 0x73, 0x63,
			0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02, 0x00, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20,
			0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67,
			0x00, 0x00, 0x09,
		}
		logger.Infow("publish", "detail", "send publish rsp done")
		writeConn(conn.conn, connectRsp)
	}
	if "play" == msg {
		connectRsp := []byte{

			/*
			  0000:  05 00 00 00 00 00 60 14  01 00 00 00               ......`.....
			  0000:  02 00 08 6f 6e 53 74 61  74 75 73 00 00 00 00 00   ...onStatus.....
			  0010:  00 00 00 00 05 03 00 05  6c 65 76 65 6c 02 00 06   ........level...
			  0020:  73 74 61 74 75 73 00 04  63 6f 64 65 02 00 14 4e   status..code...N
			  0030:  65 74 53 74 72 65 61 6d  2e 50 6c 61 79 2e 53 74   etStream.Play.St
			  0040:  61 72 74 00 0b 64 65 73  63 72 69 70 74 69 6f 6e   art..description
			  0050:  02 00 0a 53 74 61 72 74  20 6c 69 76 65 00 00 09   ...Start live...
			*/

			0x05,
			0x00, 0x00, 0x00,
			0x00, 0x00, 0x60,
			0x14,
			0x01, 0x00, 0x00, 0x00,
			0x02, 0x00, 0x08, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x03, 0x00, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x02, 0x00, 0x06,
			0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x00, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x02, 0x00, 0x14, 0x4e,
			0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x2e, 0x53, 0x74,
			0x61, 0x72, 0x74, 0x00, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
			0x02, 0x00, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x6c, 0x69, 0x76, 0x65, 0x00, 0x00, 0x09,
		}
		logger.Infow("play", "detail", "send play rsp done")
		writeConn(conn.conn, connectRsp)

		/*
		  0000:  05 00 00 00 00 01 83 12  01 00 00 00               ............
		  0000:  02 00 0a 6f 6e 4d 65 74  61 44 61 74 61 03 00 06   ...onMetaData...
		  0010:  53 65 72 76 65 72 02 00  2e 4e 47 49 4e 58 20 52   Server...NGINX R
		  0020:  54 4d 50 20 28 67 69 74  68 75 62 2e 63 6f 6d 2f   TMP (github.com/
		  0030:  61 72 75 74 2f 6e 67 69  6e 78 2d 72 74 6d 70 2d   arut/nginx-rtmp-
		  0040:  6d 6f 64 75 6c 65 29 00  05 77 69 64 74 68 00 40   module)..width.@
		  0050:  94 00 00 00 00 00 00 00  06 68 65 69 67 68 74 00   .........height.
		  0060:  40 86 80 00 00 00 00 00  00 0c 64 69 73 70 6c 61   @.........displa
		  0070:  79 57 69 64 74 68 00 40  94 00 00 00 00 00 00 00   yWidth.@........
		  0080:  0d 64 69 73 70 6c 61 79  48 65 69 67 68 74 00 40   .displayHeight.@
		  0090:  86 80 00 00 00 00 00 00  08 64 75 72 61 74 69 6f   .........duratio
		  00a0:  6e 00 00 00 00 00 00 00  00 00 00 09 66 72 61 6d   n...........fram
		  00b0:  65 72 61 74 65 00 40 39  00 00 00 00 00 00 00 03   erate.@9........
		  00c0:  66 70 73 00 40 39 00 00  00 00 00 00 00 0d 76 69   fps.@9........vi
		  00d0:  64 65 6f 64 61 74 61 72  61 74 65 00 40 9f 40 00   deodatarate.@.@.
		  00e0:  00 00 00 00 00 0c 76 69  64 65 6f 63 6f 64 65 63   ......videocodec
		  00f0:  69 64 00 40 1c 00 00 00  00 00 00 00 0d 61 75 64   id.@.........aud
		  0100:  69 6f 64 61 74 61 72 61  74 65 00 00 00 00 00 00   iodatarate......
		  0110:  00 00 00 00 0c 61 75 64  69 6f 63 6f 64 65 63 69   .....audiocodeci
		  0120:  64 00 40 00 00 00 00 00  00 00 00 07 70 72 6f 66   d.@.........prof
		  0130:  69 6c 65 02 00 20 00 00  00 00 00 00 00 00 00 00   ile.. ..........
		  0140:  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ................
		  0150:  00 00 00 00 00 00 00 05  6c 65 76 65 6c 02 00 20   ........level..
		  0160:  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ................
		  0170:  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ................
		  0180:  00 00 09                                           ...
		*/
		// metadata := []byte{}
		play(conn)
	}
}
